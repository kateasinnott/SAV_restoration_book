[["index.html", "Restoration of Aquatic Plant Communities Chapter 1 Project Introduction 1.1 Project Goals 1.2 Project Outline", " Restoration of Aquatic Plant Communities Kate Sinnott 5/4/2021 Chapter 1 Project Introduction Restoration techniques and community dynamics are not well understood for submerged aquatic vegetation (SAV). Data is fabricated for coding practice purposes 1.1 Project Goals The goal of this project is to answer the following questions: 1. What planting methods maximize SAV establishment in unvegetated aquatic habitat? 2. Does increasing SAV species richness maximize invasion resistance to non-native invaders? 1.2 Project Outline This book is composed of the following chapters: * Chapter 2 – Database Creation * Chapter 3 – Testing Invasion Resistance Mechanisms in Aquatic Plant Communities * Chapter 4 – Improving Establishment in Aquatic Plant Restoration "],["database-creation.html", "Chapter 2 Database Creation 2.1 RSQLite Package 2.2 Establishing a database connection 2.3 Building database tables", " Chapter 2 Database Creation 2.1 RSQLite Package The R package DBI (database interface) allows R to interface with SQLite. So first, we install DBI: library(DBI) 2.2 Establishing a database connection I have already created a database for my SAV restoration project in SQLite, so now I need to connect to that database using dbConnect. restoration_db &lt;- dbConnect(RSQLite::SQLite(),&quot;/Users/katesinnott/Desktop/WILD_6900/SAV_restoration/SAV_restoration.db&quot;) 2.3 Building database tables Now I need to start creating my database tables. To do this I use dbExecute, then just type in the query like I would in SQLite. This is the database structure I will be building: Figure 2.1: Database diagram 2.3.1 Table 1: Plants I started with this table because it doesn’t reference foreign keys from other tables. This table includes information I will need to reference specific plant populations - specifically, the species and the collection locations. dbExecute(restoration_db, &quot;CREATE TABLE plants ( plant_id varchar(7) NOT NULL PRIMARY KEY, species char(4), origin char(4) );&quot;) And now I will import data into it: plants &lt;- read.csv(&quot;/Users/katesinnott/Desktop/WILD_6900/SAV_restoration/raw_data/plants.csv&quot;) dbGetQuery(restoration_db, &quot;SELECT * FROM plants;&quot;) # plant_id species origin # 1 STPE_01 STPE ULSP # 2 STPE_02 STPE VINE # 3 STPE_03 STPE ULSP # 4 STPE_04 STPE VINE # 5 STPE_05 STPE ULSP # 6 STPE_06 STPE MIRA 2.3.2 Table 2: Plots This table includes static information about different plots where the plants will be introduced. The foreign key is the plant_id, which references the Plants table. Other attributes are the planting method used and the location of the plots. dbExecute(restoration_db, &quot;CREATE TABLE plots ( plot_id varchar(7) NOT NULL PRIMARY KEY, plant_id char(4), planting_method char(10), location char(5), FOREIGN KEY (plant_id) REFERENCES plants(plant_id) );&quot;) And now I will import data into it: plots &lt;- read.csv(&quot;/Users/katesinnott/Desktop/WILD_6900/SAV_restoration/raw_data/plots.csv&quot;) dbGetQuery(restoration_db, &quot;SELECT * FROM plots;&quot;) # plot_id plant_id planting_method location # 1 STPE_1a STPE hand_clump Pluto # 2 STPE_2a STPE hand_space Pluto # 3 STPE_3a STPE wrap_clump Pluto # 4 STPE_4a STPE wrap_space Pluto # 5 STPE_1b STPE hand_clump Pluto # 6 STPE_2b STPE hand_space Pluto 2.3.3 Table 3: Observations The observations table includes the data collected at each plot on different collecting days. The foreign key is the plot_id column, which references the Plots table. This data is not static. In addition to date, attributes included are water depth, flow rate, and Secchi depth, which very variable in the restoration system. dbExecute(restoration_db, &quot;CREATE TABLE observations ( observation_id varchar(4) NOT NULL PRIMARY KEY, date text, plot_id varchar(7), water_depth_m float, flow_rate_cfs float, FOREIGN KEY (plot_id) REFERENCES plots(plot_id) );&quot;) And now I’ll import the data: observations &lt;- read.csv(&quot;/Users/katesinnott/Desktop/WILD_6900/SAV_restoration/raw_data/observations.csv&quot;) dbGetQuery(restoration_db, &quot;SELECT * FROM observations;&quot;) # plot_id observation_id date water_depth_m flow_rate_cfs # 1 STPE_1a S101 9/7/21 0.3475836 12.43167 # 2 STPE_2a S102 9/7/21 0.3785017 11.81424 # 3 STPE_3a S103 9/7/21 0.6297775 16.97179 # 4 STPE_4a S104 9/7/21 0.4134080 15.63999 # 5 STPE_1b S105 9/7/21 0.5815155 16.72878 # 6 STPE_2b S106 9/7/21 0.6357363 10.63530 2.3.4 Table 4: Functional Traits This is where measurements of specific plants are recorded. This will be used to determine the success of the different plots. There are two foreign keys: plot_id and observation_id. Functional traits measured are leaf wisth, height, rhizomes, root depth, and shoot biomass. dbExecute(restoration_db, &quot;CREATE TABLE functional_traits ( measurement_id varchar(6) NOT NULL PRIMARY KEY, plot_id varchar(7), observation_id varchar(4), leaf_width_mm float, height_cm float, rhizomes_p-a float, below_biomass_g float, above_biomass_g float, FOREIGN KEY (plot_id) REFERENCES plots(plot_id), FOREIGN KEY (observation_id) REFERENCES observations(observation_id) );&quot;) And now I’ll import the data: functional_traits &lt;- read.csv(&quot;/Users/katesinnott/Desktop/WILD_6900/SAV_restoration/raw_data/functional_traits.csv&quot;) dbGetQuery(restoration_db, &quot;SELECT * FROM functional_traits;&quot;) # measurement_id observation_id plot_id leaf_width_mm height_cm rhizomes_p.a below_biomass_g # 1 M00001 S101 STPE_1a 0.10 89.38 p 11.53 # 2 M00002 S102 STPE_2a 0.70 89.07 p 3.10 # 3 M00003 S103 STPE_3a 0.58 77.96 a 6.43 # 4 M00004 S104 STPE_4a 0.34 35.27 p 27.12 # 5 M00005 S105 STPE_1b 0.66 37.05 p 20.20 # 6 M00006 S106 STPE_2b 0.72 116.55 p 15.24 # above_biomass_g # 1 52.37 # 2 50.50 # 3 19.56 # 4 57.11 # 5 36.84 # 6 53.74 2.3.5 Table 5: Species richness This table includes measurements to evaluate species richness. It has two foreign keys: observation and plot identifications. Attributes measured are presence of invasive species and percent cover of each species. dbExecute(restoration_db, &quot;CREATE TABLE species_richness ( richness_id varchar(10) NOT NULL PRIMARY KEY, plot_id varchar(5), observation_id varchar(10), inv_sp_presence_score integer, percent_cover integer, FOREIGN KEY (plot_id) REFERENCES plots(plot_id), FOREIGN KEY (observation_id) REFERENCES observations(observation_id) );&quot;) "],["testing-invasion-resistance-mechanisms-in-aquatic-plant-communities.html", "Chapter 3 Testing Invasion Resistance Mechanisms in Aquatic Plant Communities", " Chapter 3 Testing Invasion Resistance Mechanisms in Aquatic Plant Communities "],["improving-establishment-in-aquatic-plant-restoration-through-planting-method.html", "Chapter 4 Improving Establishment in Aquatic Plant Restoration Through Planting Method", " Chapter 4 Improving Establishment in Aquatic Plant Restoration Through Planting Method Paragraph about SAV restoration I want to know if the belowground biomass differs between planting methods. Stuckenia pectinata forms root tubers, which are a crucial part of how they survive the winter, disperse, and grow back rapidly following disturbance. Their rhizomes contribute to sediment stabilization, a ecosystem function in the highly turbid Utah Lake ecosystem. aMeasuring belowground biomass is a proxy for tuber and rhizome development. I want to make a bar plot showing below-ground biomass across treatments. First, I need to install tidyverse: library(tidyverse) Then I can combine the “Functional traits” and “Plot tables”, build the bar plot, and save it as an image in ggplot. functional_traits %&gt;% left_join(plots, by = &quot;plot_id&quot;) %&gt;% ggplot(mapping = aes(x= planting_method, y = below_biomass_g, fill = planting_method)) + geom_col() + labs(x = &quot;Planting method&quot;, y = &quot;Belowground biomass (g)&quot;) + theme_light() + theme(legend.position = &quot;none&quot;) + ggsave(filename = &quot;barplot.tiff&quot;, device = &quot;tiff&quot;) "]]
